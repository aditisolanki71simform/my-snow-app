<>
<h1 title="Header" className="header">{title}</h1>
{/* <h3 data-testid="header-2" className="header">Hello</h3> */}
{/* Unit Test */}
<h1 className="header" data-testid="header-2">{title}</h1>
<h6 className='header'>Aditi</h6>

{/* Semantic Test */}
<h6 title="aditiTitle" className='header'>Aditi Solanki</h6>

{/* TestId */}
<h6 className="header" data-testid="header-1">Test</h6> 
</>



it("should render same text passed into title props",async () => {
    render(<Header title="My Header"/>)
    const headingElement = screen.getByRole("heading", {name: "Aditi"});
    expect(headingElement).toBeInTheDocument();
});

//Semantic Test
it("should render same text passed into title props",async () => {
    render(<Header title="My Header"/>)
    const headingElement = screen.getByTitle("aditiTitle");
    expect(headingElement).toBeInTheDocument();
});

// test id
it("should render same text passed into title props",async () => {
    render(<Header title="Test"/>)
    const headingElement = screen.getByTestId("header-1");
    expect(headingElement).toBeInTheDocument();
});




----------------------2-------------------------

import { render, screen } from "@testing-library/react"
import HeaderTestCase from "../HeaderTestCase";

//Unit Test
//GET BY
test("should render same text passed into title props",() => {
    render(<HeaderTestCase title="my header"/>)
    const headingElement = screen.getByText(/my header/i)
    expect(headingElement).toBeInTheDocument();
});

it("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="My Header"/>)
    const headingElement = screen.getByRole("heading", {name: "My Header"});
    expect(headingElement).toBeInTheDocument();
    //error 
    // const headingElement1 = screen.getByRole("paragraph");
    // expect(headingElement1).toBeInTheDocument();
});


it("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="My Header"/>)
    const headingElement = screen.getByRole("heading", {name: "Aditi"});
    expect(headingElement).toBeInTheDocument();
});

//FIND BY (ASYNC)
test("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="moni"/>)
    const headingElement = await screen.findByText("moni")
    expect(headingElement).toBeInTheDocument();
});

//QUERY BY
//here getBy will be failed
test("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="moni"/>)
    const headingElement = await screen.queryByText("no element match")
    expect(headingElement).not.toBeInTheDocument();
});

//Semantic Test
it("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="My Header"/>)
    const headingElement = screen.getByTitle("aditiTitle");
    expect(headingElement).toBeInTheDocument();
});

//GETALLBY
it("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="My Header"/>)
    const headingElements = screen.getAllByRole("heading");
    expect(headingElements.length).toBe(5);
    expect(headingElements.length).toBeGreaterThan(2);
    expect(headingElements.length).toBeLessThan(10);
});

// test id
it("should render same text passed into title props",async () => {
    render(<HeaderTestCase title="Test"/>)
    const headingElement = screen.getByTestId("header-1");
    expect(headingElement).toBeInTheDocument();
});



------------------3------------------------
import { render, screen } from "@testing-library/react"
import { BrowserRouter } from "react-router-dom";
import TodoFooter from "../TodoFooter";


const MockTodoFooter = ({numberOfIncompleteTasks}) => {
    return (
        <BrowserRouter>
            <TodoFooter numberOfIncompleteTasks={numberOfIncompleteTasks}/>
        </BrowserRouter>
    )
}
test("should render correct amount of incomplete task", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={5}/>);
    const paragraphElement = screen.getByText(/5 tasks left/i)
    expect(paragraphElement).toBeInTheDocument();
});

test("should render 'task' when the number of incomplete tasks is one", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={1}/>);
    const paragraphElement = screen.getByText(/1 task left/i)
    expect(paragraphElement).toBeInTheDocument();
});

test("should render 'task' when the number of incomplete tasks is one", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={1}/>);
    const paragraphElement = screen.getByText(/1 task left/i)
    expect(paragraphElement).toBeTruthy();
    expect(paragraphElement).toBeVisible()
});

test("should check HTML tag is exist or not", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={1}/>);
    const paragraphElement = screen.getByText(/1 task left/i)
    expect(paragraphElement).toContainHTML("p")
    expect(paragraphElement).toHaveTextContent("1 task left")
});

//assertion with test id
test("should check HTML Role and Content", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={1}/>);
    const paragraphElement = screen.getByTestId("para");
    expect(paragraphElement).toHaveTextContent("1 task left")
});

//assertion with test id not
test("should check HTML Role and Content", async () => {
    render(<MockTodoFooter numberOfIncompleteTasks={1}/>);
    const paragraphElement = screen.getByTestId("para");
    expect(paragraphElement).not.toBeFalsy();
    expect(paragraphElement.textContent).toBe("1 task left");
});